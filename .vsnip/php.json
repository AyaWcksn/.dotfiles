{
  "class …": {
    "prefix": "class",
    "body": [
      "class ${1:ClassName} ${2:extends ${3:AnotherClass}} ${4:implements ${5:Interface}}",
      "{",
      "\t$0",
      "}",
      ""
    ],
    "description": "Class definition"
  },
  "PHPDoc class …": {
    "prefix": "doc_class",
    "body": [
      "/**",
      " * ${6:undocumented class}",
      " */",
      "class ${1:ClassName} ${2:extends ${3:AnotherClass}} ${4:implements ${5:Interface}}",
      "{",
      "\t$0",
      "}",
      ""
    ],
    "description": "Documented Class Declaration"
  },
  "function __construct": {
    "prefix": "con",
    "body": [
      "${1:public} function __construct(${2:${3:Type} \\$${4:var}${5: = ${6:null}}}) {",
      "\t\\$this->${4:var} = \\$${4:var};$0",
      "}"
    ]
  },
  "PHPDoc property": {
    "prefix": "doc_v",
    "body": [
      "/** @var ${1:Type} \\$${2:var} ${3:description} */",
      "${4:protected} \\$${2:var}${5: = ${6:null}};$0"
    ],
    "description": "Documented Class Variable"
  },
  "PHPDoc function …": {
    "prefix": "doc_f",
    "body": [
      "/**",
      " * ${1:undocumented function summary}",
      " *",
      " * ${2:Undocumented function long description}",
      " *",
      "${3: * @param ${4:Type} \\$${5:var} ${6:Description}}",
      "${7: * @return ${8:type}}",
      "${9: * @throws ${10:conditon}}",
      " **/",
      "${11:public }function ${12:FunctionName}(${13:${14:${4:Type} }\\$${5:var}${15: = ${16:null}}})",
      "{",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Documented function"
  },
  "PHPDoc param …": {
    "prefix": "param",
    "body": ["* @param ${1:Type} ${2:var} ${3:Description}$0"],
    "description": "Paramater documentation"
  },
  "function …": {
    "prefix": "fun",
    "body": [
      "${1:public }function ${2:FunctionName}(${3:${4:${5:Type} }\\$${6:var}${7: = ${8:null}}})",
      "{",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Function"
  },
  "trait …": {
    "prefix": "trait",
    "body": [
      "/**",
      " * $1",
      " */",
      "trait ${2:TraitName}",
      "{",
      "\t$0",
      "}",
      ""
    ],
    "description": "Trait"
  },
  "define(…, …)": {
    "prefix": "def",
    "body": ["define('$1', ${2:'$3'});", "$0"],
    "description": "Definition"
  },
  "do … while …": {
    "prefix": "do",
    "body": [
      "do {",
      "\t${0:# code...}",
      "} while (${1:\\$${2:a} <= ${3:10}});"
    ],
    "description": "Do-While loop"
  },
  "while …": {
    "prefix": "while",
    "body": ["while (${1:\\$${2:a} <= ${3:10}}) {", "\t${0:# code...}", "}"],
    "description": "While-loop"
  },
  "if …": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t${0:# code...}", "}"],
    "description": "If block"
  },
  "if … else …": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t${2:# code...}",
      "} else {",
      "\t${3:# code...}",
      "}",
      "$0"
    ],
    "description": "If Else block"
  },
  "$… = ( … ) ? … : …": {
    "prefix": "if?",
    "body": "\\$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b} ;",
    "description": "Ternary conditional assignment"
  },
  "else …": {
    "prefix": "else",
    "body": ["else {", "\t${0:# code...}", "}"],
    "description": "Else block"
  },
  "elseif …": {
    "prefix": "elseif",
    "body": ["elseif (${1:condition}) {", "\t${0:# code...}", "}"],
    "description": "Elseif block"
  },
  "for …": {
    "prefix": "for",
    "body": [
      "for (\\$${1:i}=${2:0}; \\$${1:i} < $3; \\$${1:i}++) { ",
      "\t${0:# code...}",
      "}"
    ],
    "description": "For-loop"
  },
  "foreach …": {
    "prefix": "foreach",
    "body": [
      "foreach (\\$${1:variable} as \\$${2:key} ${3:=> \\$${4:value}}) {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Foreach loop"
  },
  "$… = array (…)": {
    "prefix": "array",
    "body": "\\$${1:arrayName} = array('$2' => $3${4:,} $0);",
    "description": "Array initializer"
  },
  "$… = […]": {
    "prefix": "shorray",
    "body": "\\$${1:arrayName} = ['$2' => $3${4:,} $0];",
    "description": "Array initializer"
  },
  "… => …": {
    "prefix": "keyval",
    "body": "'$1' => $2${3:,} $0",
    "description": "Key-Value initializer"
  },
  "switch …": {
    "prefix": "switch",
    "body": [
      "switch (\\$${1:variable}) {",
      "\tcase '${2:value}':",
      "\t\t${3:# code...}",
      "\t\tbreak;",
      "\t$0",
      "\tdefault:",
      "\t\t${4:# code...}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch block"
  },
  "case …": {
    "prefix": "case",
    "body": ["case '${1:value}':", "\t${0:# code...}", "\tbreak;"],
    "description": "Case Block"
  },
  "$this->…": {
    "prefix": "this",
    "body": "\\$this->$0;",
    "description": "$this->..."
  },
  "echo $this->…": {
    "prefix": "ethis",
    "body": "echo \\$this->$0;",
    "description": "Echo this"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": [
      "throw new $1Exception(${2:\"${3:Error Processing Request}\"}${4:, ${5:1}});",
      "$0"
    ],
    "description": "Throw exception"
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["#region"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["#endregion"],
    "description": "Folding Region End"
  },
  "Try Catch Block": {
    "prefix": "try",
    "body": [
      "try {",
      "\t${1://code...}",
      "} catch (${2:\\Throwable} ${3:\\$th}) {",
      "\t${4://throw \\$th;}",
      "}"
    ],
    "description": "Try catch block"
  },
  "Extend layout": {
		"prefix": "b:extends",
		"body": [
			"@extends('${1:name}')"
		],
		"description": "extends view layout"
	},
	"Yield content": {
		"prefix": "b:yield",
		"body": [
			"@yield('${1:name}')"
		],
		"description": "yield content section"
	},
	"Content Section": {
		"prefix": "b:section",
		"body": [
			"@section('${1:name}')",
			"    $2",
			"@endsection"
		],
		"description": "content section"
	},
    "Content Section Show": {
		"prefix": "b:section-show",
		"body": [
			"@section('$1')",
			"    $2",
			"@show"
		],
		"description": "content section show"
	},


	"Include view": {
		"prefix": "b:include",
		"body": [
			"@include('${1:name}')"
		],
		"description": "include view"
	},


	"If-block": {
		"prefix": "b:if",
		"body": [
			"@if ($1)",
			"    $2",
			"@endif"
		],
		"description": "@if block"
	},
	"If-else-block": {
		"prefix": "b:if-else",
		"body": [
			"@if ($1)",
			"    $2",
			"@else",
			"    $3",
			"@endif"
		],
		"description": "if-else block"
	},
    "Has Section": {
		"prefix": "b:has-section",
		"body": [
			"@hasSection ('${1:name}')",
            "    $2",
            "@else",
            "    $3",
            "@endif"
		],
		"description": "@hasSection condition"
    },
    "Unless-block": {
		"prefix": "b:unless",
		"body": [
			"@unless ($1)",
			"    $2",
			"@endunless"
		],
		"description": "@unless block"
	},


	"For-block": {
		"prefix": "b:for",
		"body": [
			"@for (\\$i = ${1:0}; \\$i < ${2:\\$count}; \\$i++)",
			"    $3",
			"@endfor"
		],
		"description": "@for block"
	},
	"Foreach-block": {
		"prefix": "b:foreach",
		"body": [
			"@foreach (${1:\\$collection} as ${2:\\$item})",
			"    $3",
			"@endforeach"
		],
		"description": "@foreach block"
	},
	"forelse-block": {
		"prefix": "b:forelse",
		"body": [
			"@forelse (${1:\\$collection} as ${2:\\$item})",
			"    $3",
			"@empty",
			"    $4",
			"@endforelse"
		],
		"description": "@forelse block"
	},
	"while-block": {
		"prefix": "b:while",
		"body": [
			"@while ($1)",
			"    $2",
			"@endwhile"
		],
		"description": "@while block"
	},


	"each loop": {
		"prefix": "b:each",
		"body": [
            "@each('${1:view.name}', ${2:\\$collection}, '${3:variable}', '${4:view.empty}')"
		],
		"description": "@each loop"
	},


	"blade comment": {
		"prefix": "b:comment",
		"body": [
			"{{-- ${1:comment} --}}",
            "$2"
		],
		"description": "comment block"
	},

	"blade echo-data": {
		"prefix": "b:echo",
		"body": [
			"{{ ${1:\\$data} }}"
		],
		"description": "echo data"
	},
	"blade echo-unescaped-data": {
		"prefix": "b:echo-html",
		"body": [
			"{!! ${1:\\$html_data} !!}"
		],
		"description": "echo unescaped data (allow html outputs)"
	},
	"blade echo-untouch": {
		"prefix": "b:echo-raw",
		"body": [
			"@{{ ${1:variable} }}"
		],
		"description": "echo untouched data (allow javascript expression)"
	},
	"blade verbatim": {
		"prefix": "b:verbatim",
		"body": [
			"@verbatim",
			"{{ ${1:variable} }}",
			"@endverbatim"
		],
		"description": "displaying JavaScript variables in a large portion of your template"
	},

    "Push stack": {
		"prefix": "b:push",
		"body": [
			"@push('${1:name}')",
            "    $2",
            "@endpush"
		],
		"description": "@push stack"
	},
    "Stack": {
		"prefix": "b:stack",
		"body": [
			"@stack('${1:name}')"
		],
		"description": "@stack"
	},


	"inject service": {
		"prefix": "b:inject",
		"body": [
			"@inject('${1:name}', '${2:class}')"
		],
		"description": "@inject Service"
	},


	"can": {
		"prefix": "b:can",
		"body": [
			"@can('${1:update}', ${2:Model}::class)",
			"\t$3",
			"@endcan"
		],
		"description": "display a portion of the page only if the user is authorized to perform a given action."
	},
	"can-elsecan": {
		"prefix": "b:can-elsecan",
		"body": [
			"@can('${1:update}', ${2:\\$post})",
			"\t$3",
			"@elsecan('${4:create}', $2)",
			"\t$5",
			"@endcan"
		],
		"description": "display a portion of the page only if the user is authorized to perform a given action."
	},
	"cannot": {
		"prefix": "b:cannot",
		"body": [
			"@cannot('${1:update}', ${2:Model}::class)",
			"\t$3",
			"@endcannot"
		],
		"description": "display a portion of the page only if the user is authorized to perform a given action."
	},
	"can-elsecannot": {
		"prefix": "b:cannot-elsecannot",
		"body": [
			"@cannot('${1:update}', ${2:\\$post})",
			"\t$3",
			"@elsecannot('${4:create}', $2)",
			"\t$5",
			"@endcannot"
		],
		"description": "display a portion of the page only if the user is authorized to perform a given action."
	},

	"loop": {
		"prefix": "b:loop",
		"body": [
			"\\$loop->${1:first}$2"
		],
		"description": "$loop->(index|remaining|count|first|last|depth|parent)"
	},
	"loop first": {
		"prefix": "b:loop-first",
		"body": [
			"@if (\\$loop->first)",
			"    ${1:{{-- This is the first iteration --\\}\\}}",
			"@endif",
            "$2"
		],
		"description": "$loop->first"
	},
	"loop last": {
		"prefix": "b:loop-last",
		"body": [
			"@if (\\$loop->last)",
			"    ${1:{{-- This is the last iteration --\\}\\}}",
			"@endif"
		],
		"description": "$loop->last"
	},
	"php": {
		"prefix": "b:php",
		"body": [
			"@php",
			"    $1",
			"@endphp"
		],
		"description": "@php block code in view"
	},
	"includeIf": {
		"prefix": "b:includeIf",
		"body": [
			"@includeIf('${1:view.name}'${2:, ['some' => 'data']})"
		],
		"description": "include a view that may or may not be present, you should use the @includeIf directive"
	},


	"component": {
		"prefix": "b:component",
		"body": [
			"@component('$1')",
			"    $2",
			"@endcomponent"
		],
		"description": "component"
	},
	"slot": {
		"prefix": "b:slot",
		"body": [
			"@slot('$1')",
			"    $2",
			"@endslot"
		],
		"description": "slot"
	},
	"isset": {
		"prefix": "b:isset",
		"body": [
			"@isset(${1:\\$record})",
			"    $2",
			"@endisset"
		],
		"description": "isset"
	},
	"empty": {
		"prefix": "b:empty",
		"body": [
			"@empty(${1:\\$record})",
			"    $2",
			"@endempty"
		],
		"description": "empty"
	},
	"error": {
		"prefix": "b:error",
		"body": [
			"@error('${1:record}')",
			"    $2",
			"@enderror"
		],
		"description": "error"
	},
	"includeWhen": {
		"prefix": "b:includeWhen",
		"body": [
			"@includeWhen(${1:\\$boolean}, '${2:view.name}', [${3:'some' => 'data'}])"
		],
		"description": "includeWhen"
	},


	"auth": {
		"prefix": "b:auth",
		"body": [
			"@auth",
			"    $1",
			"@endauth"
		],
		"description": "auth"
	},
	"guest": {
		"prefix": "b:guest",
		"body": [
			"@guest",
			"    $1",
			"@endguest"
		],
		"description": "guest"
	},
	"switch": {
		"prefix": "b:switch",
		"body": [
			"@switch(${1:\\$type})",
			"    @case(${2:1})",
			"        $3",
			"        @break",
			"    @case(${4:2})",
			"        $5",
			"        @break",
			"    @default",
			"        $6",
			"@endswitch"
		],
		"description": "switch"
	},
	"includeFirst": {
		"prefix": "b:includeFirst",
		"body": [
			"@includeFirst(['${1:view.name}', '${2:variable}'], [${3:'some' => 'data'}])"
		],
		"description": "includeFirst"
	},


	"csrf": {
		"prefix": "b:csrf",
		"body": [
			"@csrf"
		],
		"description": "form csrf field"
	},
	"method": {
		"prefix": "b:method",
		"body": [
			"@method($1)"
		],
		"description": "form method field"
	},
	"dump": {
		"prefix": "b:dump",
		"body": [
			"@dump($1)"
		],
		"description": "dump"
	},


	"lang": {
		"prefix": "b:lang",
		"body": [
			"@lang('${1:messages.welcome}')"
		],
		"description": "lang"
	},


	"includeUnless": {
		"prefix": "b:includeUnless",
		"body": [
			"@includeUnless(${1:\\$boolean}, '${2:view.name}', [${3:'some' => 'data'}])"
		],
		"description": "includeUnless"
	},


	"props": {
		"prefix": "b:props",
		"body": "@props(['${1:propName}'])",
		"description": "Blade component data properties"
	},
	"env": {
		"prefix": "b:env",
		"body": [
			"@env('${1:staging}')",
			"    $2",
			"@endenv"
		],
		"description": "env"
	},
	"production": {
		"prefix": "b:production",
		"body": [
			"@production",
			"    $1",
			"@endproduction"
		],
		"description": "production"
	},
	
	"once": {
		"prefix": "b:once",
		"body": [
			"@once",
			"    $1",
			"@endonce"
		],
		"description": "define a portion of template that will only be evaluated once per rendering cycle"
	}
}
